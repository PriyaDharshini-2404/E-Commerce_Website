
                           CSS Flexbox - 1D One dimension
                           only working in one axis (ie) X or Y axis


@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');

*{
    margin: 0;
    padding: 0;
    font-family: "Roboto", sans-serif;
}

.container{
    border: 5px solid black;
}

.flex-item{
    color:black;
    font-size: 20px;
    padding: 18px;
    text-align: center;
}


.container{
    /* display: flex; (row gap)
    flex-direction: row; 
    flex-wrap: nowrap;
    flex-wrap: wrap; 
    flex-direction: wrap-reverse; 

    height: 400px;
    flex-direction: column;
    flex-wrap: nowrap;
    flex-wrap: wrap;
    flex-wrap: wrap-reverse;  */

    /* flex-direction,flex-wrap*/
    /* flex-flow: row nowrap;
    flex-flow: row wrap;
    flex-flow: row wrap-reverse;

    height: 400px;
    flex-flow: column nowrap; 
    flex-flow: column wrap;
    flex-flow: column wrap-reverse;

    display: flex; (for row nd column gap)
    flex-wrap: wrap;
    column-gap: 20px;
    row-gap: 20px; 
    gap:40px 20px;
    gap: 40px
    */
}

----------------------------------------------------------------------------
      Justify-content => Whole content eh change panra keyword ithu


display: flex;
    /*
    Justify-content => Main Axis Alignment
    row Main Axis => X
    column Main Axis => Y
    */
    
    /*flex-direction: row; (justify content nu ra option
                 apdilam row wise use panalam nu ra codes dhn ithu)
    justify-content: flex-start;
    justify-content: flex-end;
    justify-content: space-around;
    justify-content: space-evenly;
    justify-content: space-between;
*/
    flex-direction: column;
    height: 700px;
    justify-content: flex-start;
    justify-content: flex-end;
    justify-content: center;
    justify-content: space-around;
    justify-content: space-evenly;
    justify-content: space-between;

-------------------------------------------------------------------------
            Align-items => Cross Axis Alignment 
           ( inidivual item eh move panra keyword) 
                row Cross Axis => Y
                column Cross Axis => X
.container{
    display: flex;
    flex-direction: row;
    height: 600px;
    align-items: stretch;
    align-items: flex-start;
    align-items: flex-end;
    align-items: center;
    align-items: baseline; ( baseline comment using for font style text box)
}
    

 .box-1{
    font-size: 50px;
 }
 
 container{
    display: flex;
    flex-direction: column;
    height: 600px;
    align-items: stretch;
    align-items: flex-start;
    align-items: flex-end;
    align-items: center;
    align-items: baseline;
}*/
---------------------------------------------------------------------
.container{
    display: flex;
    height: 700px;
    flex-direction: row;
    align-items: stretch;
}

.box-1{
    align-self: auto;
}
.box-2{
    align-self: flex-start;
}
.box-3{
    align-self: flex-end;
}
.box-4{
    align-self: center;
}
 .box-5{
    align-self: stretch;
 }
 -------------------------------------------------------------------

 .container{
    display:flex;
    height: 500px;
    justify-content: center;
    flex-wrap: wrap;
    align-content: center; (center boxes without any in btw space)
    align-content: flex-start;
    align-content: space-between;
    align-content: space-around;

}
-------------------------------------------------------------------
                      changing the order position keyword

/*.box-1{order: 4;}
.box-2{order: 1;} 
.box-3{order: 2;}
.box-4{order: 1;}
.box-5{order: 3;}
*/
--------------------------------------------------------------------
                     inidivual box space 
 .box-3{
    flex-grow: 1;
 }
.box-4{
    flex-grow: 1; ( inidivual size increasing box)
}

.flex-item{
    flex-grow: 1;
}

.flex-item{
    flex-shrink: 1;
    flex-shrink: 0; (maintaing the content size)
}
.box-4{
    flex-shrink: 3; (inidivual box decreasing keyword)
    flex-basis: 400px; (inidivual bow writing txt content)
}
---------------------------------------------------------------------------
flex-grow
flex-grow, flex-basis (either using this [%] or that [px])
flex-grow, flex-shrink
flex-grow, flex-shrink, flex-basis 

.box-1{
    flex: 0 1 auto;
    flex: 0 2 200px; (0-flex-grow, 2-flex-shrink, 200px-flex-basis)
}

-------------------------------------------------------------------
                CSS Grid - 2D Two dimension
             => by using this gird system , using rows and columns,
                         grid makes easier to design web page layout,
                         align and distribute sapce among items in grid.
  keyword = display:grid,  display: inline-grid


  grid-template-columns: 100px 200px 300px;
    grid-template-columns: 200px 200px 200px 200px;
    grid-template-columns: repeat(5,200px);
    grid-template-columns: 2fr 2fr 1fr;
    grid-template-columns: repeat(3,minmax(200px,1fr));


 display: grid;
    grid-template-columns: repeat(3,1fr);
    height: 600px;

    grid-template-rows: 100px;
    grid-template-rows: 100px 150px 200px;
    grid-template-rows: repeat(3,100px);
    grid-template-rows: repeat(3,1fr) / repeat(4,1fr);


 grid-template-columns: repeat(3,1fr);
    height: 600px;
    grid-template-rows: repeat(3,1fr) / repeat(4,1fr);
    column-gap: 20px;
    row-gap: 20px;
    gap:40px 20px; /* row, column */
    gap:20px;


    justify-items: stretch; /* Horizontal axis align*/


    place-items: center start;
    place-items: end;
